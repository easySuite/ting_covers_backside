<?php
/**
 * @file
 * Backside functionality.
 */

/**
 * Implements hook_menu().
 */
function ting_covers_backside_menu() {
  $items = array();

  $items['ting/covers/backside'] = array(
    'title' => 'Retreives backside cover for Ting objects',
    'page callback' => 'ting_covers_backside_objects',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ting_covers_backside_theme($existing, $type, $theme, $path) {
  return array(
    'ting_object_backside_wrapper' => array(
      'render element' => 'elements',
      'template' => 'templates/ting-covers-backside',
      'variables' => array(
        'local_id' => NULL,
      ),
      'attached' => array(
        'js' => $path . 'js/jquery.reveal.js',
        'css' => $path . 'css/reveal.css',
      ),
    ),
    'ting_object_backside_data' => array(
      'template' => 'templates/ting-covers-backside-data',
      'variables' => array(
        'local_id' => NULL,
        'backside_uri' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function ting_covers_backside_cron() {
  _ting_covers_backside_delete_old_files($_SERVER['REQUEST_TIME'] - variable_get('ting_covers_cache_lifetime', TING_COVERS_DEFAULT_CACHE_LIFETIME));
}

/**
 * Delete ting backside cover files.
 *
 * @param int $time
 *   Timestamp where older files will be deleted. Omit or set to NULL to delete
 *   all files.
 */
function _ting_covers_backside_delete_old_files($time = NULL) {
  // Collect potential locations of cover folders.
  $files_dir = file_default_scheme() . '://';
  $image_dirs = array($files_dir);

  $styles_dir = $files_dir . 'styles';
  foreach (scandir($styles_dir) as $style_dir) {
    $style_dir = $styles_dir . DIRECTORY_SEPARATOR . $style_dir . DIRECTORY_SEPARATOR . 'public' . DIRECTORY_SEPARATOR;
    if (is_dir($style_dir)) {
      $image_dirs[] = $style_dir;
    }
  }

  // Collect backside cover files.
  $backover_files = array();
  foreach ($image_dirs as $uri) {
    $ting_backcovers_dir = $uri . 'ting' . DIRECTORY_SEPARATOR . 'backcovers';
    if (is_dir($ting_backcovers_dir)) {
      $backover_files = array_merge($backover_files, file_scan_directory($ting_backcovers_dir, "/./"));
    }
  }

  // Delete obsolete files.
  foreach ($backover_files as $file) {
    if (!$time || (filemtime($file->uri) < $time)) {
      file_unmanaged_delete($file->uri);
      // Delete image cache derivatives.
      image_path_flush($file->uri);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ting_covers_backside_preprocess_field(&$variables) {
  if ($variables['element']['#field_type'] == 'ting_cover') {
    $js_file = drupal_get_path('module', 'ting_covers_backside') . '/js/ting_covers_backside.js';
    $variables['items'][0]['#attached']['js'][] = $js_file;
  }
}

/**
 * Menu callback to get backside cover information.
 */
function ting_covers_backside_objects() {
  $ids = array();
  foreach ($_POST['coverData'] as $cover_info) {
    $ids[] = $cover_info['id'];
  }
  $backside_covers = ting_covers_backside_get($ids);
  $return = array();
  foreach ($backside_covers as $id => $path) {
    $link_attr = array(
      'attributes' => array(
        'class' => array('cover-back', 'reveal-cover'),
        'title' => t('See large back cover image', array(), array('context' => 'ting_covers')),
        'aria-label' => t('See large back cover image', array(), array('context' => 'ting_covers')),
        'data-reveal-id' => 'reveal-cover-back-' . $id,
      )
    );
    $return[$id]['link'] = l('', '/', $link_attr);
    $return[$id]['popup']['wrapper'] = theme('ting_object_backside_wrapper', array('local_id' => $id));
    $return[$id]['popup']['data'] = theme('ting_object_backside_data', array(
      'local_id' => $id,
      'backside_uri' => $path,
    ));
  }

  // Return all image information.
  drupal_json_output($return);
  drupal_exit();
}

/**
 * Get backside covers for an array of ids.
 *
 * @param array $requested_backside_covers
 *   Ids of entities to return covers for.
 *
 * @return array
 *   Array of id => file path for found covers.
 */
function ting_covers_backside_get(array $requested_backside_covers) {
  $entities = array();
  $backside_covers = array();

  // Create array of loaded entities for passing to hooks.
  foreach ($requested_backside_covers as $id) {
    // Ensure that the id at least seems valid.
    if (!mb_check_encoding($id, "UTF-8")) {
      continue;
    }

    // Determine if the local id is a known negative.
    if (cache_get('ting_backside_covers:' . $id, FALSE)) {
      continue;
    }

    // If we we already have a valid cover image, use it.
    $path = ting_covers_backside_object_path($id);
    if (file_exists($path)) {
      $backside_covers[$id] = $path;
      continue;
    }

    // Queue for fetching by hook.
    $entities[$id] = ding_entity_load($id);
  }

  // Fetch covers by calling hook.
  foreach (module_invoke('ting_covers_backside', 'ting_covers', $entities) as $id => $uri) {
    if ($uri && $path = _ting_covers_backside_get_file($id, $uri)) {
      $backside_covers[$id] = $path;
    }
    // Remove elements where a cover has been found, or suppressed.
    unset($entities[$id]);
  }

  // Mark all remaining as not found in cache.
  foreach ($entities as $id => $entity) {
    cache_set('ting_backside_covers:' . $id, 1, 'cache', $_SERVER['REQUEST_TIME'] + TING_COVERS_DEFAULT_CACHE_LIFETIME);
  }

  return $backside_covers;
}

/**
 * Moves/downloads an URI into the cover cache.
 *
 * @param string $id
 *   Ting entity id.
 * @param string $uri
 *   URI of file or local path.
 */
function _ting_covers_backside_get_file($id, $uri) {
  if (!($url = parse_url($uri))) {
    // Seriously malformed, ignore it.
    return FALSE;
  }

  // Flat paths don't get a scheme.
  if (!isset($url['scheme']) && file_exists($uri)) {
    $url['scheme'] = 'file';
  }

  $path = ting_covers_backside_object_path($id);

  switch ($url['scheme']) {
    case 'http':
    case 'https':
      if (ting_covers_backside_fetch_backover($path, $uri)) {
        return $path;
      }
      break;

    case 'public':
    case 'private':
    case 'file':
      if (file_unmanaged_mv($uri, $path)) {
        return $path;
      }
  }

  return FALSE;
}

/**
 * Helper function to fetch and save a backside cover image file.
 *
 * Cover fetching modules should use this if fetching the cover is a simple GET
 * request.
 *
 * @param string $filename
 *   File name, including its path within Drupal's file folder.
 * @param string $image_url
 *   URL for the source image file.
 *
 * @return mixed
 *   A file object or FALSE on error.
 *
 * @see image_style_create_derivative()
 */
function ting_covers_backside_fetch_backover($filename, $image_url) {
  $result = drupal_http_request($image_url);

  // Bail if the HTTP request failed.
  if ($result->code != 200) {
    return FALSE;
  }

  // Get the folder for the final location of this preset.
  $directory = dirname($filename);

  // Build the destination folder tree if it doesn't already exist.
  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    watchdog('ting_covers', 'Failed to create directory: %directory', array('%directory' => $directory), WATCHDOG_ERROR);
    return FALSE;
  }

  $file = file_unmanaged_save_data($result->data, $filename, FILE_EXISTS_REPLACE);

  if ($file) {
    return $file;
  }

  return FALSE;
}

/**
 * Return the path to the backside cover of the object.
 *
 * The filename is the ID base64 encoded, so we can reverse it later.
 */
function ting_covers_backside_object_path($object_id) {
  return file_default_scheme() . '://ting' . DIRECTORY_SEPARATOR . 'backcovers' . DIRECTORY_SEPARATOR . base64_encode($object_id) . '.pdf';
}

/**
 * Implements hook_ting_covers().
 *
 * Fetch covers from AdditionalInformation service.
 */
function ting_covers_backside_ting_covers($request) {
  $backside_covers = array();

  // Exceptions should only be thrown if something is so wrong,
  // that no backside files can be fetched.
  try {
    $service = new AdditionalInformationBacksideService(variable_get('ting_covers_addi_wsdl_url'), variable_get('ting_covers_addi_username'), variable_get('ting_covers_addi_group'), variable_get('ting_covers_addi_password'));

    // We're working by localId, so create a look-up table.
    $id_map = array();
    foreach ($request as $id => $entity) {
      $id_map[$entity->localId] = $id;
    }

    // Local ids = Faust numbers. Library object identifiers can be confusing.
    $retrieved = $service->getByFaustNumber(array_keys($id_map));

    foreach ($retrieved as $local_id => $backside_cover) {
      // Try to extract the image url from the result.
      $source_url = FALSE;
      if ($backside_cover->backsideUri) {
        $source_url = $backside_cover->backsideUri;
      }

      if ($source_url) {
        // Return the path to the backside_cover.
        $backside_covers[$id_map[$local_id]] = $source_url;
      }
    }
  }
  catch (Exception $e) {
    watchdog('ting_covers_addi', 'Unable to retrieve covers from ADDI: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);

    // Error in fetching, return no covers.
    return array();
  }

  // Return all backside information.
  return $backside_covers;
}
